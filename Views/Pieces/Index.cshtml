@model IEnumerable<CGMD.Models.Piece>

@{
    // Setting the page title and retrieving sort order and search phrase from ViewData
    ViewData["Title"] = "Index";
    var currentSort = ViewData["CurrentSort"] as string;
    var searchPhrase = ViewData["SearchPhrase"] as string;
    int currentPage = ViewData["CurrentPage"] as int? ?? 1;
    int totalPages = ViewData["TotalPages"] as int? ?? 1;
    int startPage = Math.Max(1, currentPage - 5);
    int endPage = Math.Min(totalPages, currentPage + 4);
}

<!-- Title for the repertoire list -->
<h2>Repertoire</h2>

<!-- Sort functionality: Allows users to sort the list of pieces -->
<div class="d-flex justify-content-end">
    <form asp-controller="Pieces" asp-action="Index" method="get" class="form-inline">
        <!-- Retains the current search phrase in subsequent sorts -->
        @if (!string.IsNullOrEmpty(searchPhrase))
        {
            <input type="hidden" name="searchPhrase" value="@searchPhrase" />
        }

        <!-- Dropdown for choosing the sort order -->
        <div class="form-group">
            <label for="sortOrder" class="mr-2">Sort by:</label>
            <select name="sortOrder" class="form-control form-control-sm" id="sortOrderSelect" onchange="this.form.submit()" style="max-width: 200px;">
                <option value="YOB_DESC">Reverse Chronological</option>
                <option value="YOB_ASC">Chronological</option>
                <option value="Composer_ASC">Composer Last Name A-Z</option>
                <option value="Composer_DESC">Composer Last Name Z-A</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary btn-sm ml-2">Sort</button>
    </form>
</div>

<!-- Displaying the search phrase if one is present -->
@if (!string.IsNullOrEmpty(searchPhrase))
{
    <div class="search-message">
        Showing results for '<strong>@searchPhrase</strong>'
    </div>
}

<!-- Table displaying the list of pieces -->
<table class="table">
    <thead>
        <tr>
            <th>Composer</th>
            <th>Year of Birth</th>
            <th>Title</th>
            <th></th> <!-- Placeholder for Details link or other actions -->
        </tr>
    </thead>
    <tbody>
        <!-- Looping through each piece and displaying its details -->
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Composer)</td>
                <td>@Html.DisplayFor(modelItem => item.YOB)</td>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td><a asp-action="Details" asp-route-id="@item.ID">Details</a></td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination Controls -->
@if (totalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <!-- Previous Page Button -->
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a class="page-link" asp-action="Index" asp-route-sortOrder="@currentSort" asp-route-searchPhrase="@searchPhrase" asp-route-page="@(currentPage - 1)">Previous</a>
            </li>

            <!-- Page Numbers -->
            @for (int i = startPage; i <= endPage; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@currentSort" asp-route-searchPhrase="@searchPhrase" asp-route-page="@i">@i</a>
                </li>
            }

            <!-- Next Page Button -->
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a class="page-link" asp-action="Index" asp-route-sortOrder="@currentSort" asp-route-searchPhrase="@searchPhrase" asp-route-page="@(currentPage + 1)">Next</a>
            </li>
        </ul>
    </nav>
}

<script>
    // Script to set the sort order in the dropdown based on the current sort order
    document.addEventListener("DOMContentLoaded", function () {
        var currentSort = '@ViewData["CurrentSort"]';
        var sortOrderSelect = document.getElementById("sortOrderSelect");
        if (currentSort) {
            sortOrderSelect.value = currentSort;
        }
    });
</script>
